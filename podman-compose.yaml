# docker-compose.yaml (utilisé par: podman compose ...)

services:
  # ---------- DATA & MESSAGING ----------
  postgres:
    image: ankane/pgvector
    container_name: catalog-postgres
    environment:
      POSTGRES_DB: catalogdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - catalog_pgdata:/var/lib/postgresql/data
    networks: [eshop-net]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "15672:15672"   # UI management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks: [eshop-net]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks: [eshop-net]

  # ---------- BACKENDS ----------
  catalog-api:
    build:
      context: .
      dockerfile: src/Catalog.API/Containerfile
    container_name: catalog-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__catalogdb: Host=postgres;Port=5432;Database=catalogdb;Username=postgres;Password=postgres
      UseCustomizationData: "true"
    ports:
      - "5000:8080"     # http://localhost:5000
    depends_on: [postgres]
    networks: [eshop-net]

  basket-api:
    build:
      context: .
      dockerfile: src/Basket.API/Containerfile
    container_name: basket-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Redis: redis:6379
      EventBus__HostName: rabbitmq
      EventBus__UserName: guest
      EventBus__Password: guest
      EventBus__RetryCount: "5"
    # pas besoin d'exposer un port hôte, web-app y accède via DNS interne
    depends_on: [redis, rabbitmq]
    networks: [eshop-net]

  identity-api:
    build:
      context: .
      dockerfile: src/Identity.API/Containerfile   # assure-toi qu’il existe
    container_name: identity-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__identitydb: Host=postgres;Port=5432;Database=identitydb;Username=postgres;Password=postgres
      WebAppClient: http://localhost:5001
    ports:
      - "5105:8080"                               # http://localhost:5105 (login UI)
    networks: [eshop-net]

  # ---------- FRONT ----------
  web-app:
    build:
      context: .
      dockerfile: src/WebApp/Containerfile
    container_name: web-app
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080

      # URLs backend (dans le réseau compose)
      CatalogUrl: http://catalog-api:8080
      BasketUrl:  http://basket-api:8080

      # Event bus (si utilisé par la web-app)
      EventBus__HostName: rabbitmq
      EventBus__UserName: guest
      EventBus__Password: guest
      EventBus__RetryCount: "5"

      # Auth OIDC
      # IMPORTANT :
      # - Si ta web-app n’a QU’UNE clé 'IdentityUrl', tu peux avoir besoin
      #   d'un mode "dev" sans auth. Sinon :
      #   - IdentityUrl sert au backchannel côté serveur
      #   - L’UI du navigateur doit atteindre http://localhost:5105
      IdentityUrl: http://identity-api:8080
      IdentityUrlExternal: http://localhost:5105
      CallBackUrl: http://localhost:5001/signin-oidc
    ports:
      - "5001:8080"     # http://localhost:5001
    depends_on: [catalog-api, basket-api, identity-api]
    networks: [eshop-net]

volumes:
  catalog_pgdata:

networks:
  eshop-net:
    driver: bridge
